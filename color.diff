diff --git a/lib/Analysis/ScopGraphPrinter.cpp b/lib/Analysis/ScopGraphPrinter.cpp
index fd4e65fb..52cafc3a 100644
--- a/lib/Analysis/ScopGraphPrinter.cpp
+++ b/lib/Analysis/ScopGraphPrinter.cpp
@@ -22,6 +22,7 @@
 #include "llvm/Analysis/RegionIterator.h"
 #include "llvm/Support/CommandLine.h"
 
+static const unsigned PAIRED12_GREEN_INDEX = 1;
 using namespace polly;
 using namespace llvm;
 static cl::opt<std::string>
@@ -135,10 +136,17 @@ struct DOTGraphTraits<ScopDetectionWrapperPass *>
     return Escaped;
   }
 
+  static unsigned getNextColor(unsigned c) {
+      unsigned cnext = (c + 1) % 12 + 1;
+      // We do not want green again.
+      if (cnext == PAIRED12_GREEN_INDEX) cnext = PAIRED12_GREEN_INDEX + 1;
+      return cnext;
+  }
+
   // Print the cluster of the subregions. This groups the single basic blocks
   // and adds a different background color for each group.
   static void printRegionCluster(const ScopDetection *SD, const Region *R,
-                                 raw_ostream &O, unsigned depth = 0) {
+                                 raw_ostream &O, unsigned depth = 0, unsigned colorPrev=1) {
     O.indent(2 * depth) << "subgraph cluster_" << static_cast<const void *>(R)
                         << " {\n";
     unsigned LineBegin, LineEnd;
@@ -156,26 +164,26 @@ struct DOTGraphTraits<ScopDetectionWrapperPass *>
     ErrorMessage = escapeString(ErrorMessage);
     O.indent(2 * (depth + 1))
         << "label = \"" << Location << ErrorMessage << "\";\n";
-
-    if (SD->isMaxRegionInScop(*R)) {
-      O.indent(2 * (depth + 1)) << "style = filled;\n";
-
-      // Set color to green.
-      O.indent(2 * (depth + 1)) << "color = 3";
-    } else {
-      O.indent(2 * (depth + 1)) << "style = solid;\n";
-
-      int color = (R->getDepth() * 2 % 12) + 1;
-
-      // We do not want green again.
-      if (color == 3)
-        color = 6;
-
-      O.indent(2 * (depth + 1)) << "color = " << color << "\n";
-    }
+    
+    const std::string colorString = [&] () -> std::string {
+        // maximal region scops are green, others are general colored, regions
+        // that do not belong to scop have no color.
+        if  (SD->regionIsInvalidBecause(R) == "") {
+            unsigned colorIndex;
+            if (SD->isMaxRegionInScop(*R))
+                colorIndex = PAIRED12_GREEN_INDEX;
+            else
+                colorIndex = getNextColor(colorPrev);
+
+            return std::string("[fillcolor=") + std::to_string(colorIndex) + std::string(", style=filled, colorscheme=paired12]");
+        }
+        else
+            return "";
+    } ();
+    
 
     for (const auto &SubRegion : *R)
-      printRegionCluster(SD, SubRegion.get(), O, depth + 1);
+      printRegionCluster(SD, SubRegion.get(), O, depth + 1, getNextColor(colorPrev));
 
     RegionInfo *RI = R->getRegionInfo();
 
@@ -184,7 +192,7 @@ struct DOTGraphTraits<ScopDetectionWrapperPass *>
         O.indent(2 * (depth + 1))
             << "Node"
             << static_cast<void *>(RI->getTopLevelRegion()->getBBNode(BB))
-            << ";\n";
+            <<  colorString           << ";\n";
 
     O.indent(2 * depth) << "}\n";
   }
